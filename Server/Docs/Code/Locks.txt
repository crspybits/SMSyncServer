In the traditional usage of a mutex lock, a lock is held while data is being altered (or read) to ensure the data is kept in a consistent state. Without such a lock, multiple concurrently processes can possibly access the data at the same time, reading and writing, breaking the discipline or structure normally imposed on the data.

In the present case, if we directly apply this reasoning, the data to be protected is the entire data set held in cloud storage. With Petunia, parts of the data set include vet visits with their associated sets of files.
With a focus on these interrelated files (e.g., a vet visit and related image files), we should then only allow one changing/reading process at a single time. In the case of uploads, when a process starts uploading, it should lock the data set. Then, upon completion of the transfer of all the data to cloud storage, the lock should be removed.

There are some issues with this direct application:

Since the processes are distributed (i.e., running on different mobile devices, accessing the Internet), it is possible and likely that during an upload operation, with a lock held, a device will become disconnected from the Internet, or the app itself will go into the background, and also lose access to the network. In this case, the lock can be held for an arbitrarily long period of time. It seems there needs to be a mechanism to either (a) break the lock or (b) have the lock expire, if the lock has been held for too long and/or the lock has been inactive for too long. This latter case of duration of inactivity seems to be the better one: A lock might be held for a long time if a large number of files were being uploaded, or the data rate of the uploading network was low.
The main or common case here should be for uploading a small number of files, that can be uploaded while the app is in the foreground, or for a resumption of the upload to be completed without interference by other uploading devices.

Lock breaking: A device will lose its lock while uploading only after a relatively long period of inactivity (presumed to be the device losing network access or app going into the background), *and* another device contending for upload. If the original uploading device regains network access before another contending device, it will retain its lock. In the event of lock breaking, an app will could lose an individual file, but in general will have to determine the collection of files that were successfully uploaded (to the SyncServer, not Cloud Storage), if their versions have changed, and restart its upload.